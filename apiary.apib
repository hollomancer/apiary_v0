FORMAT: 1A
HOST: https://cloud.sparkmeter.io/api/v0/

# SparkMeter SMS API V0

Version 0 of the SparkMeter API.
This version of the API enables remote payment and some remote connect/disconnect, as well as SMS communication.

## Authentication
All API requests are authenticated using the "Authentication-Token" header. In the code samples, replace 'your_auth_token' with the token you obtain from below.

### Obtaining a token:
In your ThunderCloud, navigate to a sales account's information page. In the "Information" box, click "View credentials" under API Credentials.
In the popup window appearing, you will find an authentication token under "API token". Copy it and give it to the trusted person/service who will be consuming the API.
This token gives access to every API Call, including creating transactions using this sales account. 
Tokens are reset if the user's settings are changed.

You need to be signed in with Operator privileges to obtain a token on a sales account.

### Missing or invalid token

+ Response 401 (application/json)

    Returned if the authentication token is missing or invalid, the following response will be provided:

    + Body

            {
                "error": "unauthorized",
                "status": "failure"
            }        

## Encoding
All API requests and responses that should be encoded are encoded with UTF-8, which is required by the JSON standard.
Consumers of the API need to convert between UTF-8 and their desired encoding.

## Endpoint
From the same popup window used to obtain an authentication token, retrieve the "API endpoint"
This API endpoint will be the same URL you use to access the ThunderCloud system at the URI "/api/v0/"

### Invalid endpoint

+ Response 404 (application/json)

    Returned if an invalid endpoint was provided.

    + Body

            {
                "error": "no such api",
                "status": "failure"
            }

## POST parameters

SparkMeter uses POST method for requests that need to either submit new data or modify existing data.
There are two different ways of providing the POST APIs with data.

You can pass in parameters either by using application/x-www-form-urlencoded or application/json.

### Form
application/x-www-form-urlencoded is the standard way a web browser uses to submit forms, most http libraries will default to this, parameters are passed in like this:

        param1=value1&param2=value2

### JSON
application/json is similar, but uses JSON encoding instead, same example as above:

        {"param1":"value1","param2":"value2"}

If unusure how to pass parameters, just use application/x-www-form-urlencoded.

### Unsupported mimetype

+ Response 415 (application/json)

    Returned if the request uses an unsupported mime type.

    + Body

            {
                "error": "bad mimetype, must be application/x-www-form-urlencoded or application/json",
                "status": "failure"
            }

## Description of a typical use case for mobile money


### Requirements

In order to enter a mobile transaction in the SparkMeter system, you need:
+ a valid API token (see above for instructions on how to obtain a token)
+ the code of the customer concerned by the transaction. This code is defined by the system owner and should be unique. It can be found and defined on the customer page.
+ optionally, an external id for the transaction to be placed in the system. This id is defined and provided by the API consumer, and has to be unique.

The transaction will be placed from the sales account matching the token used, to the customer matching the code provided.

### Step-by-step

1. **Get customer info** using the customer code.

        Upon success of the call, obtain value of field id to get the customer's internal id.

2. **Create transaction**, using the customer's internal id just obtained. 

        Optionally, an external_id can be provided for the transaction. 
        The system will reject the transaction if a transaction already exists with this external_id. 
        Upon success, the call returns an internal id for the transaction just created. 

That's it! With SparkMeter's SMS Alert, an SMS can be automatically sent to the customer once the transaction has been validated.
If you wish to follow the status of a transaction, you can follow these optional steps:

3. [optional] **Wait for the transaction to be processed**. 

        Typically, it takes a few minutes for the transaction to be sent to the Meter Application Server and processed there, then synced back.

4. [optional] **Get Transaction** using the internal id obtained from **Create Transaction** or the external id provided to it.

        Upon success, information is obtained on the status of the transaction.

# Group System

## Get System Info [GET /system-info]

This call returns information on the connection between the ThunderCloud server and Meter Application Servers (MAS) connected to it.

The information is formatted in a list. Since each ThunderCloud instance is currently only connected to one MAS, the list contains only one element.

*Typical use case*: Check that the MAS is online by retrieving the last date of sync between the servers. `last_sync_date` should never be more than a few minutes old.

+ Request (application/json)

    + Headers
    
            Authentication-Token: your_auth_token

+ Response 200 (application/json)

    Returned the request was processed properly.
    
    + Body
        
            {
                "error": null,
                "grids": [
                    {
                        "id": "4450e826-03ed-42a3-921c-7e0260fb6305",
                        "name": "groundbolt-example-installation",
                        "serial": "3Llp4sbMGQVGIvhIri_0",
                        "last_sync_date": "Thu Dec 17 2015 14:14:36 GMT-0000 (UTC)"
                    }
                ],
                "status": "success"
            }

# Group Meter

## Change Meter Operating Mode [POST /meter/{meter_serial}/set-operating-mode]

Change the operating mode of a meter (on, off, auto). This call requires a valid meter serial number.

*Typical use case*: Turn a meter Off based on information external to SparkMeter system.

See the SparkMeter documentation for more information about the values of the state.

+ Parameters

    + meter_serial: `SM15R-01-00000123` (required, string)
        a valid meter serial number

+ Attributes

    + state: `auto` (required, string) - State to set, either "on", "off" or "auto".

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Authentication-Token: your_auth_token
    
    + Body
    
            state=on

+ Response 200 (application/json)

    Returned the request was processed properly.

    + Body

            {
                "error": null,
                "status": "success"
            }

+ Response 400 (application/json)

    Returned if the request was not properly formatted, either if a parameter was missing, empty or with an incorrect value.

    + Body

            {
                "error": "missing parameter: state",
                "status": "failure"
            }        

+ Response 404 (application/json)

    Returned if the meter serial does not exist.

    + Body

            {
                "error": "no such meter",
                "status": "failure"
            }        

# Group Customer

## Get Customer Info [GET /customer/{customer_code}]

This call provides information on the customer referred to in the query.

The `customer_code` input must match exactly a "Customer code" field of an existing meter.

*Typical use cases*: 
- Retrieve last account balance - `credit_balance` - for a given customer. 
- Get the internal id - `id` - of a customer, to be used in a subsequent **Create Transaction** call.


+ Parameters

    + customer_code: `xyz` (required, string)
        a valid customer code

+ Request (application/json)

    + Headers
    
            Authentication-Token: your_auth_token

+ Response 200 (application/json)

    Returned the request was processed properly.

    + Body
    
            {
              "customers": [
                {
                  "code": "123", 
                  "credit_balance": 1000.0, 
                  "debt_balance": 0.0, 
                  "id": "b028574c-01af-4f5e-adad-a1e2eb804611", 
                  "meters": [
                    {
                      "current_tariff_name": "ET1", 
                      "is_running_plan": false, 
                      "last_energy": 0.0, 
                      "last_energy_datetime": "Thu Dec 17 2015 14:00:00 GMT-0000 (UTC)",
                      "operating_mode": 1, 
                      "plan_balance": 0.0, 
                      "serial": "SM15R-01-00000123", 
                      "total_cycle_energy": 0.0
                    }
                  ], 
                  "name": "John Doe"
                }
              ],
              "error": null,
              "status": "success"
            }

+ Response 404 (application/json)

    Returned if the customer does not exist.
    
    + Body

            {
                "error": "no such customer",
                "status": "failure"
            }

# Group Transaction

## Create transaction [POST /transaction/]

This call creates a transaction in the SparkMeter system, from the vendor matching the token used to a customer.

The customer must be referenced by its internal id, which can be obtained from a **Customer Info** call.

Optionally, an external identifier can be given as an argument. This id needs to be unique - a transaction with an external id that has already be used in the past will be refused. It can be used later to gather the status of the transaction once it has been placed.

*Typical use case*: Automatically insert mobile money transactions in the SparkMeter system. 

+ Attributes

    + customer_id: `b028574c-01af-4f5e-adad-a1e2eb804611` (required, string) - internal id of customer to which the transaction is placed
    + amount: `100.1` (required, number) - amount of transaction
    + external_id: `abc123` (optional, string) - external identifier for this transaction
    + source: `cash` (optional, string) - either `cash` or `bonus`

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Authentication-Token: your_auth_token

    + Body
    
            customer_id=60c8aa08-71a3-4d33-934c-66b32f5224bb&amount=48.5&external_id=abc123&source=cash

+ Response 201 (application/json)

    Returned the request was processed properly and the transaction has been created.

    + Headers

            Location: https://cloud.sparkmeter.io/api/v0/transaction/6180a397-3791-44da-a44f-7a3d868c5022

    + Body

            {
                "error": null,
                "status": "success",
                "transaction_id": "6180a397-3791-44da-a44f-7a3d868c5022"
            }


+ Response 400 (application/json)

    Returned if the request was not properly formatted, either if a parameter was missing, empty or with an incorrect value.

    + Body

            {
                "error": "missing parameter: amount",
                "status": "failed"
            }
            
+ Response 404 (application/json)

    Returned if the customer or transaction source does not exist.

    + Body

            {
                "error": "no such customer",
                "status": "failed"
            }
            

+ Response 422 (application/json)

    Returned if the vendor placing the transaction lacks sufficient funds.
    
    + Body

            {
                "error": "insufficient funds",
                "status": "failed"
            }
            
+ Response 423 (application/json)

    Returned if there is another transaction with the same external id.
    
    + Body

            {
                "error": "transaction already exists",
                "status": "failed"
            }            
            
## Get Transaction [GET /transaction/{id}]

Get the status of a given transaction. 

The id given in argument can be either an internal id (returned as a response to a **Create transaction** call) or an external id (provided as an argument to a valid **Create transaction** call).

The `status` field can take the following values: "not-processed", "processed", "error". If connection can be established between the Cloud and the Base Station, it takes a few minutes for a transaction to change from "not-processed" to "processed"

*Typical use case*: A few minutes after a **Create transaction** call, check that the transaction has been processed.   


+ Parameters
    + id: `d362ed9f-a3e9-49ed-a244-cd9a4776df59` (required, string)
        The system first tries to interpret this string as the UUID `id` of a transaction, then as an `external_id` if this `id` is not found. Please note that UUIDs cannot currently be used as external IDs. 

+ Request (application/json)

    + Headers
    
            Authentication-Token: your_auth_token

+ Response 200 (application/json)

    Returned if the request was processed properly.

    + Body
    
            {
                "created": "2015-08-11T14:48:34.890886", 
                "amount": 100.1, 
                "status": "processed", 
                "error": null, 
                "source": "cash",
                "id": "d362ed9f-a3e9-49ed-a244-cd9a4776df59"
                "external_id": "abc123",
                "from": { "type": "vendor", "id": "d19d9de4-5676-4c56-82ca-3c1bafbb1c74" },
                "to": { "type": "customer", "id": "63fb9295-716f-41d7-8cd3-4d29404cd70d" }
            }

+ Response 404 (application/json)

    Returned if the transaction does not exist.

    + Body

            {
                "error": "no such transaction",
                "status": "failure"
            }

# Group SMS

## Send and Receive a Two-way SMS command [POST /sms/incoming]

This API is used to send an SMS including a command to the SparkMeter system, and receive a formatted message in return.
The phone number used in the API must belong to a customer in the SparkMeter system. 

+ Parameters
    + id: `id` (optional, string)
        The external ID from the SMS Gateway. This is optional, but must be unique if provided.
    + phone_number: `+11231231234` (required, string)
        The phone number that sent the message, in must be in E164 format. It must be listed under a customer in the SparkMeter system.
    + text: `BAL` (required, string)
        The incoming message.
    + timestamp: `2016-02-23T22:49:05+00:00` (optional, string)
        If provided, this timestamp will be used by SparkMeter as the date the message was received and should respect ISO 8601 date/time format. If not, SparkMeter will use its own timestamp.

+ Request (application/json)

    + Headers
    
            Authentication-Token: your_auth_token

    + Body
    
            {
                "id": "smsgatewayid",
                "phone_number": "+11231231234",
                "text": "BAL",
                "timestamp": "2016-02-23T22:49:05+00:00"
            }
    
+ Response 201 (application/json)

    The incoming request was properly handled, `text` was parsed successfully and a reply to the command was returned.

    + Body

            {
                "error": null,
                "message": {
                    "id": "x028574c-01af-4f5e-adad-a1e2eb804611",
                    "phone_number": "+11231231234",
                    "text": "The balance for Mr. Julio is $500.",
                    "timestamp": "2016-02-23T22:49:05+00:00"
                },
                "status": "success"
            }    

+ Response 202 (application/json)

    The incoming request was properly handled and an error reply to the command was returned.
    
    This happens under the following circumstances:
    
    + `text` could not be parsed.
    
    + A customer could not be found with the specified `phone_number`.

    + Body

            {
                "error": null,
                "message": {
                    "id": "x028574c-01af-4f5e-adad-a1e2eb804611",
                    "phone_number": "+11231231234",
                    "text": "This phone number is not recognized by SparkMeter."
                    "timestamp": "2016-02-23T22:49:05+00:00"
                },
                "status": "error"
            }    

+ Response 400 (application/json)

    The incoming request could not be properly understood.
    
    This happens under the following circumstances:
    
    + Missing `phone_number` parameter.
    + Missing `text` parameter.
    + The provided `phone_number` could not be understood.
    + The provided `timestamp` could not be understood.
    
    + Body

            {
                "error": "missing parameter: phone_number",
                "status": "error"
            }    
  
+ Response 423 (application/json)

    The incoming request could be properly understood, but there is a resource conflict.
    
    This happens under the following circumstances:
    
    + The provided "id" parameter is already used by another message.
    
    + Body

            {
                "error": "message already exists",
                "status": "error"
            }    

## Outgoing SMS Messages [GET /sms/outgoing]

This API call returns the SMS Messages that are waiting to be delivered. By default it marks them as delivered and remove them from the queue.

+ Parameters
    + mark_delivered: `true` (optional, string)
        By default, messages are marked as delivered. Specify `false` to keep the messages as pending and keep them in the queue.

+ Request (application/json)

    + Headers
    
            Authentication-Token: your_auth_token
    
+ Response 200 (application/json)

    The request was processed properly.
    
    + Body

            {
                "error": "null",
                "messages": [
                    {
                        "id": "x028574c-01af-4f5e-adad-a1e2eb804611",
                        "phone_number": "+11231231234",
                        "text": "The balance for Mr. Julio is $500.",
                        "timestamp": "2016-02-23T22:49:05+00:00"
                    }
                ],
                "status": "success"
            }         

+ Response 404 (application/json)

    Returned no messages exist in the queue.

    + Body

            {
                "error": "No outgoing messages in the queue",
                "status": "failed"
            }             

## Mark outgoing messages as delivered [PUT /sms/mark-delivered]

This API call marks specific messages as delivered and removes them from the queue if they were pending.

+ Parameters
    + messages: ['id1', 'id2'] (required, array)
        The message ids to be marked as delivered.

+ Request (application/json)

    + Headers
    
            Authentication-Token: your_auth_token
    
+ Response 200 (application/json)

    Returned the request was processed properly.
    
    + Body

            {
                "error": "null",
                "messages": [
                    {
                        "id": "x028574c-01af-4f5e-adad-a1e2eb804612",
                        "status": "not-found"
                    },
                    {
                        "id": "x028574c-01af-4f5e-adad-a1e2eb804611",
                        "status": "removed"
                    }
                ],
                "status": "success"
            }         

+ Response 404 (application/json)

    Returned if no messages were specified in the parameters.

    + Body

            {
                "error": "No outgoing messages specified",
                "status": "failed"
            }